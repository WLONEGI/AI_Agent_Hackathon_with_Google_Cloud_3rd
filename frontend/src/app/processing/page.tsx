'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { PHASE_DEFINITIONS, type PhaseId, type PhaseStatus, type LogEntry } from '@/types/processing';
import { ProgressBar, PulseDots, Spinner } from '@/components/ui/loading';
import { PhasePreview } from '@/components/features/phase/PhasePreview';
import { ChatFeedback } from '@/components/features/chat/ChatFeedback';
import { useWebSocket } from '@/hooks/useWebSocket';
import { 
  Search, 
  Network, 
  Film, 
  Users, 
  Grid3x3, 
  Image, 
  CheckCircle,
  AlertCircle,
  Clock,
  PlayCircle,
  PauseCircle,
  RotateCw,
  ChevronDown,
  ChevronUp
} from 'lucide-react';

const phaseIcons: Record<PhaseId, React.ReactNode> = {
  1: <Search className="w-5 h-5" />,
  2: <Network className="w-5 h-5" />,
  3: <Film className="w-5 h-5" />,
  4: <Users className="w-5 h-5" />,
  5: <Grid3x3 className="w-5 h-5" />,
  6: <Image className="w-5 h-5" />,
  7: <CheckCircle className="w-5 h-5" />,
};

interface PhaseData {
  [key: PhaseId]: any;
}

interface ChatMessage {
  id: string;
  content: string;
  type: 'user' | 'system' | 'assistant';
  timestamp: Date;
  phaseId?: PhaseId;
}

export default function HITLProcessingPage() {
  const [phaseStatuses, setPhaseStatuses] = useState<Record<PhaseId, PhaseStatus>>({
    1: 'pending',
    2: 'pending',
    3: 'pending',
    4: 'pending',
    5: 'pending',
    6: 'pending',
    7: 'pending',
  });
  
  const [currentPhase, setCurrentPhase] = useState<PhaseId | null>(null);
  const [logs, setLogs] = useState<LogEntry[]>([]);
  const [phaseData, setPhaseData] = useState<PhaseData>({});
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [isWaitingFeedback, setIsWaitingFeedback] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [expandedPhases, setExpandedPhases] = useState<Set<PhaseId>>(new Set());
  
  const logContainerRef = useRef<HTMLDivElement>(null);
  const { 
    isConnected, 
    connect, 
    startGeneration, 
    sendFeedback, 
    skipFeedback,
    cancelGeneration 
  } = useWebSocket();

  // WebSocketÊé•Á∂ö
  useEffect(() => {
    if (!isConnected) {
      connect();
    }
  }, [isConnected, connect]);

  // Auto-scroll logs
  useEffect(() => {
    if (logContainerRef.current) {
      logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;
    }
  }, [logs]);

  // LogËøΩÂä†Èñ¢Êï∞
  const addLog = useCallback((message: string, type: LogEntry['type'], phaseId?: PhaseId) => {
    const newLog: LogEntry = {
      id: `${Date.now()}-${Math.random()}`,
      timestamp: new Date(),
      message,
      type,
      phaseId,
    };
    setLogs(prev => [...prev, newLog]);
  }, []);

  // Chat messageËøΩÂä†Èñ¢Êï∞
  const addChatMessage = useCallback((content: string, type: 'user' | 'system' | 'assistant', phaseId?: PhaseId) => {
    const newMessage: ChatMessage = {
      id: `${Date.now()}-${Math.random()}`,
      content,
      type,
      timestamp: new Date(),
      phaseId,
    };
    setChatMessages(prev => [...prev, newMessage]);
  }, []);

  // „Éï„Çß„Éº„Ç∫Âá¶ÁêÜÈñãÂßã
  const handleStartProcessing = async () => {
    if (!isConnected) {
      addLog('WebSocketÊé•Á∂ö„ÇíÁ¢∫Á´ã‰∏≠...', 'system');
      await connect();
      return;
    }

    // „É™„Çª„ÉÉ„Éà
    setPhaseStatuses({
      1: 'pending',
      2: 'pending',
      3: 'pending',
      4: 'pending',
      5: 'pending',
      6: 'pending',
      7: 'pending',
    });
    setPhaseData({});
    setChatMessages([]);
    setLogs([]);
    setCurrentPhase(null);
    setIsWaitingFeedback(false);
    setIsPaused(false);

    // „Çª„ÉÉ„Ç∑„Éß„É≥ÈñãÂßã
    const newSessionId = `session-${Date.now()}`;
    setSessionId(newSessionId);
    
    addLog('üöÄ AIÊº´ÁîªÁîüÊàê„ÇíÈñãÂßã„Åó„Åæ„Åô', 'system');
    addChatMessage('Êº´ÁîªÁîüÊàê„Éó„É≠„Çª„Çπ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü„ÄÇÂêÑ„Éï„Çß„Éº„Ç∫„ÅßÂøÖË¶Å„Å´Âøú„Åò„Å¶„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô„ÄÇ', 'system');
    
    // „ÉÜ„Çπ„ÉàÁî®„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÅßÁîüÊàêÈñãÂßã
    const testText = "Â∞ëÂπ¥„ÅåÁï∞‰∏ñÁïå„ÅßÂÜíÈô∫„Åô„ÇãÁâ©Ë™û";
    startGeneration(testText);
    
    // „Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥„Åß„Éï„Çß„Éº„Ç∫„ÇíÂá¶ÁêÜ
    simulatePhaseProcessing();
  };

  // „Éï„Çß„Éº„Ç∫Âá¶ÁêÜ„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
  const simulatePhaseProcessing = async () => {
    for (let i = 1; i <= 7; i++) {
      if (isPaused) {
        addLog('Âá¶ÁêÜ„Çí‰∏ÄÊôÇÂÅúÊ≠¢„Åó„Åæ„Åó„Åü', 'system');
        return;
      }

      const phaseId = i as PhaseId;
      await processPhase(phaseId);
    }
    
    addLog('üéä Êº´ÁîªÁîüÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ', 'complete');
    addChatMessage('„Åô„Åπ„Å¶„ÅÆ„Éï„Çß„Éº„Ç∫„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇÁîüÊàê„Åï„Çå„ÅüÊº´Áîª„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ', 'assistant');
  };

  // ÂÄãÂà•„Éï„Çß„Éº„Ç∫Âá¶ÁêÜ
  const processPhase = async (phaseId: PhaseId) => {
    const phase = PHASE_DEFINITIONS[phaseId];
    
    setCurrentPhase(phaseId);
    setPhaseStatuses(prev => ({ ...prev, [phaseId]: 'processing' }));
    addLog(`„Éï„Çß„Éº„Ç∫${phaseId}: ${phase.name}„ÇíÈñãÂßã`, 'phase', phaseId);
    
    // „Éï„Çß„Éº„Ç∫„Éá„Éº„ÇøÁîüÊàêÔºà„É¢„ÉÉ„ÇØÔºâ
    const mockData = generateMockPhaseData(phaseId);
    setPhaseData(prev => ({ ...prev, [phaseId]: mockData }));
    
    // Âá¶ÁêÜ‰∏≠„ÅÆ„Éï„Çß„Éº„Ç∫„ÇíËá™ÂãïÂ±ïÈñã
    setExpandedPhases(prev => new Set([...prev, phaseId]));
    
    // Âá¶ÁêÜÊôÇÈñì„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
    await new Promise(resolve => setTimeout(resolve, phase.estimatedTime / 3)); // „Éá„É¢Áî®„Å´Áü≠Á∏Æ
    
    // ÂêÑ„Éï„Çß„Éº„Ç∫„ÅßHITL„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÂæÖÊ©ü
    setPhaseStatuses(prev => ({ ...prev, [phaseId]: 'waiting_feedback' }));
    setIsWaitingFeedback(true);
    addLog(`„Éï„Çß„Éº„Ç∫${phaseId}„ÅÆ„Éó„É¨„Éì„É•„Éº„ÇíÁ¢∫Ë™ç„Åó„Å¶„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô`, 'system', phaseId);
    addChatMessage(`„Éï„Çß„Éº„Ç∫${phaseId}„Äå${phase.name}„Äç„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇÁµêÊûú„Çí„ÅîÁ¢∫Ë™ç„ÅÑ„Åü„Å†„Åç„ÄÅ‰øÆÊ≠£„ÅåÂøÖË¶Å„Å™Â†¥Âêà„ÅØ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„Çí„ÅäÈÄÅ„Çä„Åè„Å†„Åï„ÅÑ„ÄÇ`, 'assistant', phaseId);
    
    // „Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÂæÖÊ©üÔºà30Áßí„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÔºâ
    await waitForFeedback(phaseId);
    setIsWaitingFeedback(false);
    
    setPhaseStatuses(prev => ({ ...prev, [phaseId]: 'completed' }));
    addLog(`„Éï„Çß„Éº„Ç∫${phaseId}: ${phase.name}„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü`, 'complete', phaseId);
  };

  // „Éï„Çß„Éº„Ç∫„ÅÆÂ±ïÈñã/Êäò„Çä„Åü„Åü„ÅøÂàá„ÇäÊõø„Åà
  const togglePhaseExpansion = (phaseId: PhaseId) => {
    setExpandedPhases(prev => {
      const newSet = new Set(prev);
      if (newSet.has(phaseId)) {
        newSet.delete(phaseId);
      } else {
        newSet.add(phaseId);
      }
      return newSet;
    });
  };

  // „Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÂæÖÊ©ü
  const waitForFeedback = (phaseId: PhaseId): Promise<void> => {
    return new Promise((resolve) => {
      const timeout = setTimeout(() => {
        addLog(`„Éï„Çß„Éº„Ç∫${phaseId}„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÊôÇÈñì„ÅåÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü`, 'system', phaseId);
        addChatMessage('„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„Çø„Ç§„É†„Ç¢„Ç¶„Éà„ÄÇÊ¨°„ÅÆ„Éï„Çß„Éº„Ç∫„Å´ÈÄ≤„Åø„Åæ„Åô„ÄÇ', 'system', phaseId);
        resolve();
      }, 30000); // 30ÁßíÔºàË®≠Ë®àÊõ∏Ê∫ñÊã†Ôºâ

      // „Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØËß£Ê±∫Áî®„ÅÆÈñ¢Êï∞„Çí‰øùÂ≠ò
      (window as any).__feedbackResolve = () => {
        clearTimeout(timeout);
        resolve();
      };
    });
  };

  // „Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÈÄÅ‰ø°Âá¶ÁêÜ
  const handleSendFeedback = (message: string, messageType: 'text' | 'quick_action') => {
    if (!currentPhase || !isWaitingFeedback) return;
    
    addChatMessage(message, 'user', currentPhase);
    addLog(`„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ: ${message}`, 'feedback', currentPhase);
    
    // WebSocketÁµåÁî±„Åß„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÈÄÅ‰ø°
    sendFeedback(currentPhase, message);
    
    // AI„ÅÆÂøúÁ≠î„Çí„Ç∑„Éü„É•„É¨„Éº„Éà
    setTimeout(() => {
      addChatMessage(`„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíÂèó„Åë‰ªò„Åë„Åæ„Åó„Åü„ÄÇ„Äå${message}„Äç„Å´Âü∫„Å•„ÅÑ„Å¶Ë™øÊï¥„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ`, 'assistant', currentPhase);
      
      // „Éï„Çß„Éº„Ç∫„Éá„Éº„Çø„ÇíÊõ¥Êñ∞Ôºà„É¢„ÉÉ„ÇØÔºâ
      const updatedData = { ...phaseData[currentPhase], feedbackApplied: true };
      setPhaseData(prev => ({ ...prev, [currentPhase]: updatedData }));
      
      // „Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÂá¶ÁêÜÂÆå‰∫Ü
      if ((window as any).__feedbackResolve) {
        (window as any).__feedbackResolve();
      }
    }, 2000);
  };

  // „Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„Çπ„Ç≠„ÉÉ„Éó
  const handleSkipFeedback = () => {
    if (!currentPhase || !isWaitingFeedback) return;
    
    addLog('„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åó„Åü', 'system', currentPhase);
    addChatMessage('„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åó„Åü„ÄÇÊ¨°„ÅÆ„Éï„Çß„Éº„Ç∫„Å´ÈÄ≤„Åø„Åæ„Åô„ÄÇ', 'system', currentPhase);
    
    // WebSocketÁµåÁî±„Åß„Çπ„Ç≠„ÉÉ„ÉóÈÄöÁü•
    skipFeedback(currentPhase);
    
    if ((window as any).__feedbackResolve) {
      (window as any).__feedbackResolve();
    }
  };

  // ‰∏ÄÊôÇÂÅúÊ≠¢/ÂÜçÈñã
  const handlePauseResume = () => {
    setIsPaused(!isPaused);
    if (isPaused) {
      addLog('Âá¶ÁêÜ„ÇíÂÜçÈñã„Åó„Åæ„Åô', 'system');
      simulatePhaseProcessing();
    } else {
      addLog('Âá¶ÁêÜ„Çí‰∏ÄÊôÇÂÅúÊ≠¢„Åó„Åæ„Åô', 'system');
    }
  };

  // „É™„Çª„ÉÉ„Éà
  const handleReset = () => {
    cancelGeneration();
    setPhaseStatuses({
      1: 'pending',
      2: 'pending',
      3: 'pending',
      4: 'pending',
      5: 'pending',
      6: 'pending',
      7: 'pending',
    });
    setPhaseData({});
    setChatMessages([]);
    setLogs([]);
    setCurrentPhase(null);
    setIsWaitingFeedback(false);
    setIsPaused(false);
    setSessionId(null);
    addLog('„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åó„Åü', 'system');
  };

  const getPhaseStatusClass = (status: PhaseStatus) => {
    switch (status) {
      case 'processing':
        return 'border-[rgb(var(--accent-primary))] bg-[rgb(var(--bg-tertiary))] animate-pulse-genspark';
      case 'waiting_feedback':
        return 'border-[rgb(var(--status-warning))] bg-[rgb(var(--bg-tertiary))]';
      case 'completed':
        return 'border-[rgb(var(--status-success))]';
      case 'error':
        return 'border-[rgb(var(--status-error))]';
      default:
        return '';
    }
  };

  const getLogClass = (type: LogEntry['type']) => {
    switch (type) {
      case 'system':
        return 'text-[rgb(var(--text-tertiary))]';
      case 'phase':
        return 'text-[rgb(var(--status-info))]';
      case 'feedback':
        return 'text-[rgb(var(--status-warning))]';
      case 'error':
        return 'text-[rgb(var(--status-error))]';
      case 'complete':
        return 'text-[rgb(var(--status-success))]';
      default:
        return '';
    }
  };

  return (
    <div className="h-screen overflow-hidden bg-[rgb(var(--bg-primary))] flex flex-col">
      {/* Header */}
      <div className="flex-shrink-0 border-b border-[rgb(var(--border-default))] bg-[rgb(var(--bg-secondary))]">
        <div className="px-4 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <h1 className="text-xl font-bold">AIÊº´ÁîªÁîüÊàê - HITLÂá¶ÁêÜ</h1>
              {isConnected ? (
                <span className="text-xs text-[rgb(var(--status-success))] flex items-center gap-1">
                  <span className="w-2 h-2 bg-[rgb(var(--status-success))] rounded-full"></span>
                  Êé•Á∂ö‰∏≠
                </span>
              ) : (
                <span className="text-xs text-[rgb(var(--text-tertiary))] flex items-center gap-1">
                  <span className="w-2 h-2 bg-[rgb(var(--text-tertiary))] rounded-full"></span>
                  Êú™Êé•Á∂ö
                </span>
              )}
            </div>
            <div className="flex items-center gap-2">
              {!sessionId ? (
                <Button onClick={handleStartProcessing} disabled={!isConnected}>
                  <PlayCircle className="w-4 h-4 mr-2" />
                  ÁîüÊàêÈñãÂßã
                </Button>
              ) : (
                <>
                  <Button onClick={handlePauseResume} variant="secondary" size="sm">
                    {isPaused ? <PlayCircle className="w-4 h-4" /> : <PauseCircle className="w-4 h-4" />}
                  </Button>
                  <Button onClick={handleReset} variant="destructive" size="sm">
                    <RotateCw className="w-4 h-4" />
                  </Button>
                </>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Main Content - 2 Column Layout (Responsive) */}
      <div className="flex-1 flex flex-col lg:flex-row overflow-hidden">
        {/* Left Panel - Logs and Chat */}
        <div className="w-full lg:w-1/2 h-1/2 lg:h-full border-b lg:border-b-0 lg:border-r border-[rgb(var(--border-default))] flex flex-col">
          {/* Logs */}
          <div className="flex-1 flex flex-col border-b border-[rgb(var(--border-default))]">
            <div className="flex-shrink-0 p-3 border-b border-[rgb(var(--border-default))]">
              <h3 className="text-sm font-semibold">Âá¶ÁêÜ„É≠„Ç∞</h3>
            </div>
            <div 
              ref={logContainerRef}
              className="flex-1 overflow-y-auto p-3 space-y-1 scrollbar-thin text-xs"
            >
              {logs.map((log) => (
                <div 
                  key={log.id} 
                  className={`flex gap-2 py-1 ${getLogClass(log.type)}`}
                >
                  <span className="text-[rgb(var(--text-muted))] flex-shrink-0">
                    {log.timestamp.toLocaleTimeString('ja-JP')}
                  </span>
                  <span className="flex-1">{log.message}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Chat Feedback */}
          <div className="h-1/3 lg:h-1/2">
            <ChatFeedback
              phaseId={currentPhase}
              isActive={isWaitingFeedback}
              onSendFeedback={handleSendFeedback}
              onSkipFeedback={handleSkipFeedback}
              messages={chatMessages}
              timeoutSeconds={30}
            />
          </div>
        </div>

        {/* Right Panel - Phase Progress with Integrated Preview */}
        <div className="w-full lg:w-1/2 h-1/2 lg:h-full flex flex-col">
          <div className="flex-shrink-0 p-3 border-b border-[rgb(var(--border-default))]">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-semibold">„Éï„Çß„Éº„Ç∫ÈÄ≤Ë°åÁä∂Ê≥Å</h3>
              <div className="flex items-center gap-2">
                <span className="text-xs text-[rgb(var(--text-secondary))]">
                  {Object.values(phaseStatuses).filter(s => s === 'completed').length}/7 ÂÆå‰∫Ü
                </span>
                <ProgressBar 
                  value={Object.values(phaseStatuses).filter(s => s === 'completed').length}
                  max={7}
                  className="w-24"
                />
              </div>
            </div>
          </div>

          <div className="flex-1 overflow-y-auto p-3 space-y-2">
            {(Object.keys(PHASE_DEFINITIONS) as unknown as PhaseId[]).map((phaseId) => {
              const phase = PHASE_DEFINITIONS[phaseId];
              const status = phaseStatuses[phaseId];
              const isExpanded = expandedPhases.has(phaseId);
              const hasData = !!phaseData[phaseId];
              
              return (
                <Card 
                  key={phaseId}
                  className={`transition-all duration-300 ${getPhaseStatusClass(status)}`}
                >
                  <CardHeader 
                    className={`p-3 ${hasData ? 'cursor-pointer hover:bg-[rgb(var(--bg-tertiary))]' : ''}`}
                    onClick={() => hasData && togglePhaseExpansion(phaseId)}
                  >
                    <div className="flex items-center gap-2">
                      <div className={`p-1.5 rounded-lg bg-[rgb(var(--bg-primary))] ${
                        status === 'processing' ? 'text-[rgb(var(--accent-primary))]' : 
                        status === 'completed' ? 'text-[rgb(var(--status-success))]' :
                        status === 'waiting_feedback' ? 'text-[rgb(var(--status-warning))]' :
                        'text-[rgb(var(--text-tertiary))]'
                      }`}>
                        {phaseIcons[phaseId]}
                      </div>
                      <div className="flex-1">
                        <p className="text-sm font-medium">
                          Phase {phaseId}: {phase.name}
                        </p>
                        <p className="text-xs text-[rgb(var(--text-secondary))]">
                          {phase.description}
                        </p>
                      </div>
                      <div className="flex items-center gap-2">
                        {status === 'completed' && (
                          <CheckCircle className="w-4 h-4 text-[rgb(var(--status-success))]" />
                        )}
                        {status === 'processing' && (
                          <Spinner size="sm" />
                        )}
                        {status === 'waiting_feedback' && (
                          <AlertCircle className="w-4 h-4 text-[rgb(var(--status-warning))]" />
                        )}
                        {status === 'pending' && (
                          <Clock className="w-4 h-4 text-[rgb(var(--text-tertiary))]" />
                        )}
                        {hasData && (
                          isExpanded ? 
                            <ChevronUp className="w-4 h-4 text-[rgb(var(--text-secondary))]" /> :
                            <ChevronDown className="w-4 h-4 text-[rgb(var(--text-secondary))]" />
                        )}
                      </div>
                    </div>
                  </CardHeader>
                  
                  {/* Integrated Preview within Phase Card */}
                  {isExpanded && hasData && (
                    <CardContent className="p-3 pt-0">
                      <div className="border-t border-[rgb(var(--border-default))] pt-3">
                        <PhasePreview
                          phaseId={phaseId}
                          data={phaseData[phaseId]}
                          isActive={status === 'waiting_feedback'}
                          onFeedback={handleSendFeedback}
                        />
                      </div>
                    </CardContent>
                  )}
                </Card>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
}

// „É¢„ÉÉ„ÇØ„Éá„Éº„ÇøÁîüÊàêÈñ¢Êï∞
function generateMockPhaseData(phaseId: PhaseId): any {
  switch (phaseId) {
    case 1:
      return {
        theme: 'ÂãáÊ∞ó„Å®ÂèãÊÉÖ„ÅÆÂÜíÈô∫Ë≠ö',
        genres: ['Â∞ëÂπ¥Êº´Áîª', '„Éï„Ç°„É≥„Çø„Ç∏„Éº', 'ÂÜíÈô∫'],
        worldSetting: 'È≠îÊ≥ï„ÅåÂ≠òÂú®„Åô„ÇãÁï∞‰∏ñÁïå„ÄÇÂè§‰ª£„ÅÆÈÅ∫Ë∑°„Å®Áèæ‰ª£„ÅÆÊäÄË°ì„ÅåÂÖ±Â≠ò„Åô„ÇãÁã¨Áâπ„Å™‰∏ñÁïåË¶≥„ÄÇ',
        targetAudience: '10‰ª£„Äú20‰ª£„ÅÆÂ∞ëÂπ¥„ÉªÈùíÂπ¥Â±§',
      };
    case 2:
      return {
        characters: [
          {
            name: '‰∏ª‰∫∫ÂÖ¨„Éª„É¶„Ç¶„Ç≠',
            role: '‰∏ª‰∫∫ÂÖ¨',
            age: 15,
            personality: 'ÂãáÊï¢„ÅßÊ≠£Áæ©ÊÑü„ÅåÂº∑„ÅÑ',
            description: 'Áï∞‰∏ñÁïå„Å´Âè¨Âñö„Åï„Çå„ÅüÈ´òÊ†°Áîü„ÄÇÁâπÊÆä„Å™ËÉΩÂäõ„ÇíÊåÅ„Å§„ÄÇ',
          },
          {
            name: '„Éü„É©',
            role: '„Éí„É≠„Ç§„É≥',
            age: 16,
            personality: 'ËÅ°Êòé„ÅßÂÑ™„Åó„ÅÑ',
            description: 'Áï∞‰∏ñÁïå„ÅÆÈ≠îÊ≥ï‰Ωø„ÅÑ„ÄÇ‰∏ª‰∫∫ÂÖ¨„Çí„Çµ„Éù„Éº„Éà„Åô„Çã„ÄÇ',
          },
        ],
      };
    case 3:
      return {
        act1: '‰∏ª‰∫∫ÂÖ¨„ÅåÁï∞‰∏ñÁïå„Å´Âè¨Âñö„Åï„Çå„Çã„ÄÇÊñ∞„Åó„ÅÑ‰∏ñÁïå„ÅÆ„É´„Éº„É´„ÇíÂ≠¶„Å∂„ÄÇ',
        act2: 'Âº∑Â§ß„Å™Êïµ„Å®„ÅÆÈÅ≠ÈÅá„ÄÇ‰ª≤Èñì„Å®„ÅÆÂá∫‰ºö„ÅÑ„Å®ÊàêÈï∑„ÄÇ',
        act3: 'ÊúÄÁµÇÊ±∫Êà¶„ÄÇ‰∏ñÁïå„ÇíÊïë„ÅÜ„Åü„ÇÅ„ÅÆÈÅ∏Êäû„ÄÇ',
        keyPoints: ['Âè¨Âñö„Ç∑„Éº„É≥', 'ËÉΩÂäõË¶öÈÜí', '‰ª≤Èñì„Å®„ÅÆÁµÜ', '„ÇØ„É©„Ç§„Éû„ÉÉ„ÇØ„Çπ„Éê„Éà„É´'],
      };
    case 4:
      return {
        pages: [
          {
            panels: [
              { size: 'Â§ß', description: 'Áï∞‰∏ñÁïåÂè¨Âñö„Ç∑„Éº„É≥', dialogue: '„Åì„Çå„ÅØ...„Å©„Åì„Å†Ôºü' },
              { size: '‰∏≠', description: 'Âë®Âõ≤„ÇíË¶ãÊ∏°„Åô‰∏ª‰∫∫ÂÖ¨', dialogue: null },
              { size: 'Â∞è', description: '„Éü„É©„Å®„ÅÆÂá∫‰ºö„ÅÑ', dialogue: '„Çà„ÅÜ„Åì„Åù„ÄÅÁï∞‰∏ñÁïå„Å∏' },
            ],
          },
        ],
      };
    case 5:
      return {
        images: [
          { prompt: 'Áï∞‰∏ñÁïå„ÅÆÈ¢®ÊôØ„ÄÅ„Éï„Ç°„É≥„Çø„Ç∏„Éº„ÄÅÈ´òÂìÅË≥™', url: null },
          { prompt: '‰∏ª‰∫∫ÂÖ¨„ÅÆÁ´ã„Å°Áµµ„ÄÅÂ∞ëÂπ¥„ÄÅÂÜíÈô∫ËÄÖ', url: null },
        ],
      };
    case 6:
      return {
        dialogues: [
          { panelNumber: 1, character: '„É¶„Ç¶„Ç≠', type: '„Çª„É™„Éï', text: '„Åì„ÅÆ‰∏ñÁïå„ÇíÂÆà„ÇãÔºÅ' },
          { panelNumber: 2, character: '„Éü„É©', type: '„Çª„É™„Éï', text: '‰∏ÄÁ∑í„Å´Êà¶„ÅÑ„Åæ„Åô' },
        ],
        soundEffects: ['„Éâ„Ç´„Éº„É≥ÔºÅ', '„Ç∑„É•„ÉÉ', '„Ç¥„Ç¥„Ç¥„Ç¥'],
      };
    case 7:
      return {
        qualityScores: {
          story: 85,
          visual: 82,
          layout: 88,
        },
        stats: {
          totalPages: 20,
          totalPanels: 120,
          generationTime: 97,
        },
        outputUrl: null,
      };
    default:
      return {};
  }
}
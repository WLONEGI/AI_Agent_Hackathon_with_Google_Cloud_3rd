"""Generated content repository interface."""

from abc import ABC, abstractmethod
from typing import List, Optional, Dict, Any, Union
from datetime import datetime

from app.domain.manga.entities.generated_content import (
    GeneratedContent, ContentId, ContentType, ContentStatus, ContentFormat
)


class GeneratedContentRepository(ABC):
    """Abstract repository interface for generated content."""
    
    @abstractmethod
    async def save(self, content: GeneratedContent) -> None:
        """Save or update generated content."""
        pass
    
    @abstractmethod
    async def find_by_id(self, content_id: ContentId) -> Optional[GeneratedContent]:
        """Find content by ID."""
        pass
    
    @abstractmethod
    async def find_by_session_id(self, session_id: str) -> List[GeneratedContent]:
        """Find all content for a session."""
        pass
    
    @abstractmethod
    async def find_by_session_and_phase(
        self, 
        session_id: str, 
        phase_number: int
    ) -> List[GeneratedContent]:
        """Find content for a specific session and phase."""
        pass
    
    @abstractmethod
    async def find_by_content_type(self, content_type: ContentType) -> List[GeneratedContent]:
        """Find content by type."""
        pass
    
    @abstractmethod
    async def find_by_status(self, status: ContentStatus) -> List[GeneratedContent]:
        """Find content by status."""
        pass
    
    @abstractmethod
    async def find_pending_review(self) -> List[GeneratedContent]:
        """Find content pending human review."""
        pass
    
    @abstractmethod
    async def find_approved_content(
        self, 
        session_id: Optional[str] = None
    ) -> List[GeneratedContent]:
        """Find approved content, optionally filtered by session."""
        pass
    
    @abstractmethod
    async def find_rejected_content(
        self, 
        session_id: Optional[str] = None
    ) -> List[GeneratedContent]:
        """Find rejected content, optionally filtered by session."""
        pass
    
    @abstractmethod
    async def find_final_content(self, session_id: str) -> List[GeneratedContent]:
        """Find finalized content for a session."""
        pass
    
    @abstractmethod
    async def find_by_hash(self, content_hash: str) -> List[GeneratedContent]:
        """Find content by hash (for deduplication)."""
        pass
    
    @abstractmethod
    async def find_by_generator(self, generated_by: str) -> List[GeneratedContent]:
        """Find content generated by specific AI model or agent."""
        pass
    
    @abstractmethod
    async def find_by_tags(self, tags: List[str]) -> List[GeneratedContent]:
        """Find content containing any of the specified tags."""
        pass
    
    @abstractmethod
    async def find_with_dependencies(
        self, 
        dependency_id: ContentId
    ) -> List[GeneratedContent]:
        """Find content that depends on specified content."""
        pass
    
    @abstractmethod
    async def find_related_content(
        self, 
        content_id: ContentId
    ) -> List[GeneratedContent]:
        """Find content related to specified content."""
        pass
    
    @abstractmethod
    async def find_content_versions(
        self, 
        parent_content_id: ContentId
    ) -> List[GeneratedContent]:
        """Find all versions of content (by parent ID)."""
        pass
    
    @abstractmethod
    async def find_by_date_range(
        self,
        start_date: datetime,
        end_date: datetime,
        content_type: Optional[ContentType] = None
    ) -> List[GeneratedContent]:
        """Find content created within date range."""
        pass
    
    @abstractmethod
    async def find_high_quality_content(
        self, 
        quality_threshold: float = 0.8
    ) -> List[GeneratedContent]:
        """Find content with quality score above threshold."""
        pass
    
    @abstractmethod
    async def find_low_quality_content(
        self, 
        quality_threshold: float = 0.6
    ) -> List[GeneratedContent]:
        """Find content with quality score below threshold."""
        pass
    
    @abstractmethod
    async def find_large_content(
        self, 
        size_threshold_mb: float = 1.0
    ) -> List[GeneratedContent]:
        """Find content larger than size threshold."""
        pass
    
    @abstractmethod
    async def find_expensive_content(
        self, 
        cost_threshold: float = 0.05
    ) -> List[GeneratedContent]:
        """Find content with generation cost above threshold (USD)."""
        pass
    
    @abstractmethod
    async def count_by_type_and_status(
        self, 
        content_type: ContentType, 
        status: ContentStatus
    ) -> int:
        """Count content by type and status."""
        pass
    
    @abstractmethod
    async def count_by_session(self, session_id: str) -> int:
        """Count content for a session."""
        pass
    
    @abstractmethod
    async def delete(self, content_id: ContentId) -> bool:
        """Delete content. Returns True if deleted."""
        pass
    
    @abstractmethod
    async def delete_by_session(self, session_id: str) -> int:
        """Delete all content for a session. Returns count deleted."""
        pass
    
    @abstractmethod
    async def archive_old_content(self, days_old: int = 90) -> int:
        """Archive content older than specified days. Returns count archived."""
        pass
    
    @abstractmethod
    async def exists(self, content_id: ContentId) -> bool:
        """Check if content exists."""
        pass
    
    @abstractmethod
    async def get_content_statistics(
        self, 
        session_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """Get content generation statistics."""
        pass
    
    @abstractmethod
    async def get_storage_usage(self, session_id: Optional[str] = None) -> Dict[str, float]:
        """Get storage usage statistics in MB."""
        pass
    
    @abstractmethod
    async def get_generation_costs(
        self, 
        session_id: Optional[str] = None,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None
    ) -> Dict[str, float]:
        """Get generation cost statistics in USD."""
        pass
    
    @abstractmethod
    async def search_content(
        self,
        query: str,
        content_types: Optional[List[ContentType]] = None,
        limit: int = 50
    ) -> List[GeneratedContent]:
        """Search content by text query."""
        pass
    
    @abstractmethod
    async def find_duplicate_content(
        self, 
        similarity_threshold: float = 0.9
    ) -> List[List[GeneratedContent]]:
        """Find groups of similar/duplicate content."""
        pass
    
    @abstractmethod
    async def update_content_status(
        self, 
        content_id: ContentId, 
        status: ContentStatus
    ) -> bool:
        """Update content status only. Returns True if updated."""
        pass
    
    @abstractmethod
    async def bulk_approve_content(
        self,
        content_ids: List[ContentId],
        approval_score: float
    ) -> int:
        """Bulk approve content. Returns count approved."""
        pass
    
    @abstractmethod
    async def bulk_reject_content(
        self,
        content_ids: List[ContentId],
        reason: str
    ) -> int:
        """Bulk reject content. Returns count rejected."""
        pass
    
    @abstractmethod
    async def find_content_needing_cleanup(
        self, 
        days_old: int = 30
    ) -> List[ContentId]:
        """Find content IDs that are candidates for cleanup."""
        pass
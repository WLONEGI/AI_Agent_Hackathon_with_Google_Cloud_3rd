# Enhanced Cloud Build configuration for Production Deployment
# AI Manga Generation Service - Google Cloud Hackathon

substitutions:
  _SERVICE_NAME: manga-ai-backend
  _REGION: asia-northeast1
  _REPOSITORY: manga-service
  _MIN_INSTANCES: "2"
  _MAX_INSTANCES: "8"
  _MEMORY: "2Gi"
  _CPU: "1"
  _CONCURRENCY: "50"
  _TIMEOUT: "600"

steps:
  # Step 1: Build production-ready Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args:
      - 'build'
      - '--target=production'
      - '--build-arg=BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")'
      - '--build-arg=VCS_REF=${SHORT_SHA}'
      - '--build-arg=VERSION=${TAG_NAME:-latest}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/backend:${SHORT_SHA}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/backend:latest'
      - '--cache-from'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/backend:latest'
      - '-f'
      - 'Dockerfile.production'
      - '.'
    timeout: '600s'

  # Step 2: Run security vulnerability scan
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'security-scan'
    args:
      - 'container'
      - 'images'
      - 'scan'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/backend:${SHORT_SHA}'
      - '--format=json'
    timeout: '300s'

  # Step 3: Run automated tests in container
  - name: '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/backend:${SHORT_SHA}'
    id: 'run-tests'
    entrypoint: '/bin/bash'
    args:
      - '-c'
      - |
        # Set test environment variables
        export ENV=test
        export DATABASE_URL=sqlite+aiosqlite:///tmp/test.db
        export REDIS_URL=redis://localhost:6379/15
        export SECRET_KEY=test-secret-key-for-ci-cd-pipeline-only
        export GOOGLE_CLOUD_PROJECT=${PROJECT_ID}
        
        # Run tests with coverage
        python -m pytest app/tests/ \
          --cov=app \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-fail-under=70 \
          -v \
          --tb=short
    timeout: '600s'

  # Step 4: Push image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/backend'
    timeout: '300s'

  # Step 5: Create/Update secrets in Secret Manager (if not exists)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'setup-secrets'
    entrypoint: '/bin/bash'
    args:
      - '-c'
      - |
        # Check and create secrets if they don't exist
        secrets=("manga-db-url" "manga-secret-key" "manga-firebase-creds")
        
        for secret in "${secrets[@]}"; do
          if ! gcloud secrets describe $secret --project=${PROJECT_ID} >/dev/null 2>&1; then
            echo "Creating secret: $secret"
            case $secret in
              "manga-secret-key")
                # Generate a secure secret key
                python3 -c "import secrets; print(secrets.token_urlsafe(32))" | \
                gcloud secrets create $secret --data-file=-
                ;;
              *)
                echo "Secret $secret needs manual creation with actual values"
                ;;
            esac
          else
            echo "Secret $secret already exists"
          fi
        done
    timeout: '120s'

  # Step 6: Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-service'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/backend:${SHORT_SHA}'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--memory=${_MEMORY}'
      - '--cpu=${_CPU}'
      - '--min-instances=${_MIN_INSTANCES}'
      - '--max-instances=${_MAX_INSTANCES}'
      - '--timeout=${_TIMEOUT}'
      - '--concurrency=${_CONCURRENCY}'
      - '--cpu-boost'
      - '--execution-environment=gen2'
      - '--port=8000'
      # Production environment variables
      - '--set-env-vars=ENV=production,DEBUG=false,LOG_LEVEL=INFO,GOOGLE_CLOUD_PROJECT=${PROJECT_ID},VERTEXAI_LOCATION=${_REGION}'
      # Secrets from Secret Manager
      - '--set-secrets=DATABASE_URL=manga-db-url:latest,SECRET_KEY=manga-secret-key:latest,FIREBASE_CREDENTIALS_JSON=manga-firebase-creds:latest'
      # Service account for Vertex AI access
      - '--service-account=manga-service@${PROJECT_ID}.iam.gserviceaccount.com'
      # Network configuration (requires VPC connector to be created)
      # - '--vpc-connector=manga-vpc-connector'
      # - '--vpc-egress=private-ranges-only'
    timeout: '600s'

  # Step 7: Health check and smoke tests
  - name: 'gcr.io/cloud-builders/curl'
    id: 'health-check'
    entrypoint: '/bin/bash'
    args:
      - '-c'
      - |
        # Get service URL
        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format='value(status.url)')
        
        echo "Service URL: $SERVICE_URL"
        
        # Wait for service to be ready
        for i in {1..10}; do
          if curl -f "$SERVICE_URL/health" --max-time 10; then
            echo "Health check passed"
            break
          fi
          echo "Waiting for service to be ready... ($i/10)"
          sleep 10
        done
        
        # Test API endpoints
        echo "Testing API info endpoint..."
        curl -f "$SERVICE_URL/api/v1/info" --max-time 30
        
        echo "Testing root endpoint..."
        curl -f "$SERVICE_URL/" --max-time 30
        
        echo "All smoke tests passed!"
    timeout: '300s'

  # Step 8: Update traffic allocation (gradual rollout)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'traffic-allocation'
    args:
      - 'run'
      - 'services'
      - 'update-traffic'
      - '${_SERVICE_NAME}'
      - '--to-latest'
      - '--region=${_REGION}'
    timeout: '120s'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  
# Global timeout
timeout: '2400s'  # 40 minutes

# Available logs
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/manga-secret-key/versions/latest
    env: 'BUILD_SECRET_KEY'
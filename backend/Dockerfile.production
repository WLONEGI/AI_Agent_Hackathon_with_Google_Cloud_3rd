# Production-Ready Multi-Stage Dockerfile for AI Manga Generation Service
# Optimized for Google Cloud Run deployment

# Build stage - compile dependencies and prepare application
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.0

# Add metadata
LABEL org.opencontainers.image.title="AI Manga Generation Service"
LABEL org.opencontainers.image.description="FastAPI service for AI-powered manga generation"
LABEL org.opencontainers.image.version=${VERSION}
LABEL org.opencontainers.image.created=${BUILD_DATE}
LABEL org.opencontainers.image.revision=${VCS_REF}
LABEL org.opencontainers.image.vendor="Comic AI Agent"

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    libc-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Upgrade pip and install wheel
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies with optimizations
RUN pip install --no-cache-dir --user --no-warn-script-location \
    --disable-pip-version-check \
    -r requirements.txt

# Production stage - minimal runtime image
FROM python:3.11-slim as production

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser -u 1001 appuser

# Set working directory
WORKDIR /app

# Copy Python packages from builder stage
COPY --from=builder /root/.local /home/appuser/.local

# Copy application code
COPY --chown=appuser:appuser . .

# Ensure appuser owns the application directory
RUN chown -R appuser:appuser /app

# Create directories for logs and temporary files
RUN mkdir -p /app/logs /app/tmp && \
    chown -R appuser:appuser /app/logs /app/tmp

# Switch to non-root user
USER appuser

# Set environment variables
ENV PYTHONPATH=/app \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH=/home/appuser/.local/bin:$PATH \
    USER=appuser \
    HOME=/home/appuser

# Expose port (Cloud Run will override this)
EXPOSE 8000

# Health check for container orchestration
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Production entrypoint with optimized settings
ENTRYPOINT ["uvicorn"]
CMD ["app.main:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "1", \
     "--log-level", "info", \
     "--access-log", \
     "--no-use-colors", \
     "--loop", "asyncio"]

# Development stage (for local development)
FROM production as development

# Switch back to root to install development dependencies
USER root

# Install development tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    vim \
    htop \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
COPY requirements-dev.txt* ./
RUN if [ -f requirements-dev.txt ]; then \
        pip install --no-cache-dir --user -r requirements-dev.txt; \
    fi

# Switch back to appuser
USER appuser

# Override entrypoint for development with hot reload
CMD ["uvicorn", "app.main:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--reload", \
     "--log-level", "debug"]

# Test stage (for CI/CD pipeline)
FROM development as test

USER root

# Install test dependencies
RUN pip install --no-cache-dir \
    pytest \
    pytest-asyncio \
    pytest-cov \
    httpx

USER appuser

# Set test environment
ENV ENV=test

# Run tests by default
CMD ["pytest", "app/tests/", \
     "--cov=app", \
     "--cov-report=term-missing", \
     "--cov-report=xml", \
     "--cov-fail-under=80", \
     "-v"]

# Build argument for target stage selection
ARG BUILD_TARGET=production
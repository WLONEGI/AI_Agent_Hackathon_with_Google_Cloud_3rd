name: Backend Compliance Tests

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-compliance-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-compliance-tests.yml'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - compliance
          - contracts

jobs:
  compliance-tests:
    name: Design Compliance Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
      fail-fast: false
    
    env:
      PYTHONPATH: ${{ github.workspace }}/backend
      TEST_SUITE: ${{ github.event.inputs.test_suite || 'all' }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install Dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-html pyyaml jinja2
        
        # プロジェクト依存関係のインストール
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        if [ -f requirements-dev.txt ]; then
          pip install -r requirements-dev.txt
        fi
        if [ -f requirements-test.txt ]; then
          pip install -r requirements-test.txt
        fi

    - name: Lint with ruff (if available)
      working-directory: ./backend
      run: |
        if command -v ruff &> /dev/null; then
          ruff check app/ --select E,W,F
        else
          echo "Ruff not available, skipping lint"
        fi
      continue-on-error: true

    - name: Check Code Style with black (if available)
      working-directory: ./backend
      run: |
        if command -v black &> /dev/null; then
          black --check app/ || echo "Black formatting issues found"
        else
          echo "Black not available, skipping format check"
        fi
      continue-on-error: true

    - name: Run Compliance Tests
      working-directory: ./backend
      run: |
        echo "🚀 Running compliance tests with Python ${{ matrix.python-version }}"
        echo "📋 Test Suite: ${{ env.TEST_SUITE }}"
        
        python run_compliance_tests.py \
          --suite ${{ env.TEST_SUITE }} \
          --output-dir test_results/python-${{ matrix.python-version }}
      id: tests

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: backend/test_results/python-${{ matrix.python-version }}/
        retention-days: 30

    - name: Upload Compliance Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: compliance-report-python-${{ matrix.python-version }}
        path: |
          backend/test_results/python-${{ matrix.python-version }}/compliance_report.html
          backend/test_results/python-${{ matrix.python-version }}/compliance_report.json
        retention-days: 30

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Compliance Tests (Python ${{ matrix.python-version }})
        path: 'backend/test_results/python-${{ matrix.python-version }}/*.xml'
        reporter: java-junit
        fail-on-error: false

    - name: Comment PR with Results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          const path = './backend/test_results/python-${{ matrix.python-version }}/test_summary.json';
          
          if (fs.existsSync(path)) {
            const summary = JSON.parse(fs.readFileSync(path, 'utf8'));
            const successRate = summary.successful_suites / summary.total_suites * 100;
            const duration = summary.total_duration;
            
            const body = `## 🧪 Backend Compliance Test Results (Python ${{ matrix.python-version }})
            
            - **Success Rate**: ${successRate.toFixed(1)}% (${summary.successful_suites}/${summary.total_suites} suites)
            - **Duration**: ${duration.toFixed(2)} seconds
            - **Test Suite**: ${{ env.TEST_SUITE }}
            - **Timestamp**: ${summary.timestamp}
            
            ${successRate === 100 ? '✅' : '⚠️'} **Overall Status**: ${successRate === 100 ? 'PASSED' : 'NEEDS ATTENTION'}
            
            📊 [View detailed compliance report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }

  security-check:
    name: Security & Quality Gate
    runs-on: ubuntu-latest
    needs: compliance-tests
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Security Tools
      run: |
        pip install bandit safety
      continue-on-error: true

    - name: Run Security Scan (Bandit)
      working-directory: ./backend
      run: |
        if command -v bandit &> /dev/null; then
          bandit -r app/ -f json -o security_report.json || true
          bandit -r app/ || echo "Security issues found"
        else
          echo "Bandit not available, skipping security scan"
        fi
      continue-on-error: true

    - name: Check Dependencies (Safety)
      working-directory: ./backend
      run: |
        if command -v safety &> /dev/null && [ -f requirements.txt ]; then
          safety check -r requirements.txt || echo "Dependency vulnerabilities found"
        else
          echo "Safety check skipped"
        fi
      continue-on-error: true

  deployment-gate:
    name: Deployment Quality Gate
    runs-on: ubuntu-latest
    needs: [compliance-tests, security-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Download Test Results
      uses: actions/download-artifact@v3
      with:
        name: test-results-python-3.11
        path: test-results/

    - name: Evaluate Deployment Readiness
      run: |
        echo "🚀 Evaluating deployment readiness..."
        
        if [ -f test-results/test_summary.json ]; then
          python3 -c "
          import json
          with open('test-results/test_summary.json', 'r') as f:
              summary = json.load(f)
          success_rate = summary['successful_suites'] / summary['total_suites'] * 100 if summary['total_suites'] > 0 else 0
          print(f'Success Rate: {success_rate:.1f}%')
          
          if success_rate >= 95:
              print('✅ DEPLOYMENT APPROVED: High compliance rate')
              exit(0)
          elif success_rate >= 80:
              print('⚠️  DEPLOYMENT WARNING: Moderate compliance rate')
              exit(0)
          else:
              print('❌ DEPLOYMENT BLOCKED: Low compliance rate')
              exit(1)
          "
        else
          echo "❌ No test results found, blocking deployment"
          exit 1

    - name: Notify Deployment Status
      if: always()
      run: |
        echo "📱 Deployment status notification would be sent here"
        # ここでSlack/Teams/Email通知を追加可能